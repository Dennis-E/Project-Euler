# Euler 51
# Smallest n-figure-prime where a 8-prime-family can be generated by exchanging between 1 and n of their figures by one NUMBER

from itertools import permutations

def is_prime(number):
    max_value=int(number**(1/2)+1)
    if number==0 or number==1: return False
    if number==2: return True
    for i in range(2,max_value): #improved to only count until sqrt of number
        if number%i==0:
            return False
            break
    return True


i=56004
digits=0
flag=False

while True:
    print("i ="+(str(i))) 
    #Check if new "mask" is needed
    if len(str(i))>digits:
        digits=len(str(i))
    
        #Create "Mask" for changing possible combinations of numbers
        mask=set()
        options=[]
        for number in range(1,len(str(i))):
            options.append(number*"1"+(len(str(i))-number)*"0")  #"0" if number stays fixed, "1" to change it
        #Can be merged with line above
        for element in options:
            permutes=list(permutations(element))
            for item in permutes:
                mask.add(''.join(item))
        
    if is_prime(i)==True:
        new_number=list("0"*digits)
        for element in mask:
            #Counting within "the family"
            count=0
            for figure in range(10):    #Including 0
                position=0
                for number in element:
                    if position==0 and figure==0: break  # except first position
                    if number=="1":
                        new_number[position]=str(figure)
                    elif number=="0":
                        new_number[position]=str(i)[position]
                    position+=1
                if is_prime(int(''.join(new_number))):
                    print("The "+str(count+1)+" count is: "+''.join(new_number))
                    count+=1
                    if count==8:
                        print("The solution is: "+str(i))
                        flag=True
                if flag==True:break
            if flag==True:break
        if flag==True:break
    if flag==True:break       
    i+=1